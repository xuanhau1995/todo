@use 'sass:math';
// @import './modules/breakpoint.scss';

// animate easing css
$ease-new: cubic-bezier(0.1, 1.34, 0.99, 0.89);
$ease-new-1: cubic-bezier(0.67, 1.52, 1, 1.09);

$ease-in-quad: cubic-bezier(0.55, 0.085, 0.68, 0.53);
$ease-in-cubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);
$ease-in-quart: cubic-bezier(0.895, 0.03, 0.685, 0.22);
$ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06);
$ease-in-sine: cubic-bezier(0.47, 0, 0.745, 0.715);
$ease-in-expo: cubic-bezier(0.95, 0.05, 0.795, 0.035);
$ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.335);
$ease-in-back: cubic-bezier(0.6, -0.28, 0.735, 0.045);

$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$ease-out-cubic: cubic-bezier(0.215, 0.61, 0.355, 1);
$ease-out-quart: cubic-bezier(0.165, 0.84, 0.44, 1);
$ease-out-quint: cubic-bezier(0.23, 1, 0.32, 1);
$ease-out-sine: cubic-bezier(0.39, 0.575, 0.565, 1);
$ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);
$ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);
$ease-out-back: cubic-bezier(0.175, 0.885, 0.32, 1.275);

$ease-in-out-quad: cubic-bezier(0.455, 0.03, 0.515, 0.955);
$ease-in-out-cubic: cubic-bezier(0.645, 0.045, 0.355, 1);
$ease-in-out-quart: cubic-bezier(0.77, 0, 0.175, 1);
$ease-in-out-quint: cubic-bezier(0.86, 0, 0.07, 1);
$ease-in-out-sine: cubic-bezier(0.445, 0.05, 0.55, 0.95);
$ease-in-out-expo: cubic-bezier(1, 0, 0, 1);
$ease-in-out-circ: cubic-bezier(0.785, 0.135, 0.15, 0.86);
$ease-in-out-back: cubic-bezier(0.68, -0.55, 0.265, 1.55);

@mixin font-face($name, $path, $weight: null, $style: null, $exts: otf) {
  $src: null;

  $extmods: (
    eot: '?',
    svg: '#' + str-replace($name, ' ', '_'),
  );

  $formats: (
    otf: 'opentype',
    ttf: 'truetype',
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + '.' + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -khtml-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

@mixin respond-to($size) {
  @media (max-width: $size) {
    @content;
  }
}

@mixin respond-from($size) {
  @media (min-width: $size) {
    @content;
  }
}

@mixin respond-between($size1, $size2) {
  @media (min-width: $size1) and (max-width: $size2) {
    @content;
  }
}

@mixin border-radius($border-radius) {
  @include css3-prefix(border-radius, $border-radius);
}

@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

@function calcEm($font, $base: 16) {
  @return math.div($font, $base) * 1em;
}

@mixin box-full {
  content: '';
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
}

@mixin box-ratio {
  display: inline-block;
  position: relative;
  overflow: hidden;
  background-position: center;
  background-repeat: no-repeat;
  background-size: 100% auto;
  -webkit-mask-size: contain;
  -webkit-mask-repeat: no-repeat;
  -webkit-mask-position: center;
  mask-size: contain;
  mask-repeat: no-repeat;
  mask-position: center;
  &:before {
    content: '';
    float: left;
    padding-top: 100%;
  }
}

@mixin box-center {
  position: absolute;
  top: 50%;
  left: 50%;
  @include css3-prefix(transform, translate(-50%, -50%));
}

@mixin textNLine($n) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $n;
  line-clamp: $n;
  -webkit-box-orient: vertical;
}

@mixin transition($x...) {
  -webkit-transition: $x;
  -moz-transition: $x;
  -ms-transition: $x;
  -o-transition: $x;
  transition: $x;
}

/* Mask image */
@mixin maskImg($url) {
  -webkit-mask-image: url($url);
  -webkit-mask-position: center;
  mask-position: center;
  mask-image: url($url);
}

/* select parent */
@mixin unify-parent($child) {
  @at-root #{selector.unify(&, $child)} {
    @content;
  }
}

// general class opacity
@mixin generalOpacity() {
  $items: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;
  @each $item in $items {
    .op-#{$item} {
      opacity: math.div($item, 10);
    }
  }
}

// general class font weight
@mixin generalFontWeight() {
  $items: 300, 400, 500, 600, 700;
  @each $i in $items {
    .fw-#{$i} {
      font-weight: $i;
    }
  }
}

// general class width
@mixin generalWidth() {
  $items: 16, 18, 24;
  @each $i in $items {
    .w-#{$i} {
      width: $i + px;
    }
  }
}

// general class width
@mixin generalWidthPercent() {
  $items: 80, 90;
  @each $i in $items {
    .w-pct-#{$i} {
      width: $i % 100%;
    }
  }
}

// general class max width
@mixin generalMaxWidth() {
  $items: 370, 550, 630, 680, 690, 750, 790, 850, 960, 1080, 1100, 1600;
  @each $i in $items {
    .mw-#{$i} {
      max-width: $i + px;
    }
  }
}

// general class space
@mixin generalSpace($cenfix: '') {
  $items: 0, 5, 10, 16, 20, 24, 30, 40, 50, 60, 70, 80, 95, 120, 160;
  @each $i in $items {
    .pt#{$cenfix}#{$i} {
      padding-top: #{$i}px;
    }

    .pb#{$cenfix}#{$i} {
      padding-bottom: #{$i}px;
    }

    .pl#{$cenfix}#{$i} {
      padding-left: #{$i}px;
    }

    .py#{$cenfix}#{$i} {
      padding-top: #{$i}px;
      padding-bottom: #{$i}px;
    }

    .px#{$cenfix}#{$i} {
      padding-left: #{$i}px;
      padding-right: #{$i}px;
    }
  }
}
